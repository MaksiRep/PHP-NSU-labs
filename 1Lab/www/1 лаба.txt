1) Напишите запрос, который выводит все строки из таблицы Покупателей, для которых номер продавца равен 1001.

SELECT *
FROM cust
WHERE snum = 1001


2) Напишите запрос, который выводит таблицу Продавцов со столбцами в следующем порядке: city, sname, snum, comm.

SELECT city, sname, snum, comm
FROM sal


3) Напишите запрос, который выводит оценку (rating), сопровождаемую именем каждого покупателя в городе San Jose.

SELECT rating, cname
FROM cust
WHERE city = 'San Jose'


4) Напишите запрос, который выводит значение номера продавца всех продавцов из таблицы Заказов без каких бы то ни было повторений.

SELECT snum
FROM ord
GROUP BY snum


5) Напишите запрос, который может выдать вам поля sname и city для всех продавцов в Лондоне с комиссионными строго больше 0.11.

SELECT snum, city
FROM sal
WHERE city = 'London' AND comm > 0.11


6) Напишите запрос к таблице Покупателей, который может вывести данные обо всех покупателях с рейтингом меньше или равным 200, если они не находятся в Риме.

SELECT * 
FROM cust
WHERE rating >= 200 AND city != 'Rome'



7) Запросите двумя способами все заказы на 3 и 5 октября 1990 г.

SELECT *
FROM ord
WHERE odate = '03-OCT-90' OR odate = '05-OCT-90'

SELECT *
FROM ord
WHERE odate IN ('03-OCT-90', '05-OCT-90')



8) Напишите запрос, который может вывести всех покупателей, чьи имена начинаются с буквы, попадающей в диапазон от A до G.

SELECT *
FROM cust
WHERE LEFT(cname, 1) BETWEEN 'A' AND 'G';



9) Напишите запрос, который выберет всех продавцов, имена которых содержат букву e.

SELECT *
FROM sal
WHERE sname LIKE '%e%';


10) Напишите запрос, который сосчитал бы сумму всех заказов на 3 октября 1990 г.

SELECT SUM(amt) AS sum
FROM ord
WHERE odate = '03-OCT-90'


11) Напишите запрос, который сосчитал бы сумму всех заказов для продавца с номером 1001.

SELECT SUM(amt) AS sum
FROM ord
WHERE snum = 1001



12) Напишите запрос, который выбрал бы наибольший заказ для каждого продавца.

SELECT onum, amt, odate, cnum, ord.snum as snum
FROM ord, (SELECT snum, MAX(amt) AS max_amt
       FROM ord
       GROUP BY snum) S
WHERE ORD.snum = S.snum AND amt = max_amt

13) Напишите запрос, который выбрал бы покупателя, чье имя является первым в алфавитном порядке среди имен, заканчивающихся на букву s.

SELECT *
FROM cust
WHERE RIGHT(cname,1) like 's'
GROUP BY cname ASC
LIMIT 1;


14) Напишите запрос, который выбрал бы средние комиссионные в каждом городе.

SELECT city, AVG(comm) AS city_avg
FROM sal
GROUP BY city


15) Напишите запрос, который вывел бы для каждого заказа на 3 октября его номер, стоимость заказа в евро (1$=0.8 евро), имя продавца и размер комиссионных, полученных продавцом за этот заказ.

SELECT onum, amt*0.8 as euro, sname, comm
FROM ord
         JOIN sal S on ord.snum = S.snum
WHERE odate = '03-OCT-90'



16) Напишите запрос, который выводит номера заказов в возрастающем порядке, а также имена продавцов и покупателей заказов, продавец которых находится в Лондоне или Риме.

SELECT onum, c.cname as customer, s.sname as saller
FROM ord
         JOIN cust C on ord.cnum = C.cnum
         JOIN sal S on ord.snum = s.snum
WHERE S.city IN ('London', 'Rome')
ORDER BY onum


17) Запросите имена продавцов в алфавитном порядке, суммарные значения их заказов, совершенных до 5 октября, и полученные комиссионные.

SELECT sal.sname, SUM(amt) as sum, comm
FROM sal
         JOIN sample.ord O on sal.snum = O.snum
WHERE odate < '05-OCT-90'
GROUP BY sal.snum, sal.sname
ORDER BY sal.sname


"SELECT sname, sum, comm
FROM sal,
     (SELECT sal.snum, SUM(amt) as sum
      FROM sal
               JOIN sample.ord O on sal.snum = O.snum
      WHERE odate < '05-OCT-90'
      GROUP BY sal.snum) as END_SUM
WHERE END_SUM.snum = sal.snum
ORDER BY sname"


18) Выведите номера заказов, их стоимость и имена продавцов и покупателей, если продавцы и покупатели находятся в городах, чьи названия начинаются с букв из диапазона от L до R.

SELECT onum, amt, sname, cname
FROM ord
         JOIN sample.cust C on ord.cnum = C.cnum
         JOIN sample.sal S on ord.snum = S.snum
WHERE (LEFT(C.city, 1) BETWEEN 'L'AND 'R') AND (LEFT(S.city, 1) BETWEEN 'L' AND 'R')


19) Запросите все пары покупателей, обслуживаемые одним и тем же продавцом. Исключите комбинации покупателей с самими собой, а также пары в обратном порядке.

SELECT cnum, cust.snum
FROM cust,
     (SELECT snum, COUNT(cnum) AS COUNT
      FROM cust
      GROUP BY snum) CUSTOMERS_COUNT
WHERE COUNT = 2 AND CUSTOMERS_COUNT.snum = cust.snum
ORDER BY snum


20) С помощью подзапроса выведите имена всех покупателей, чьи продавцы имеют комиссионные меньше 0.13.

SELECT cname
FROM cust
WHERE cust.snum IN (SELECT snum
                    FROM sal
                    WHERE comm < 0.13)



21) Напишите команду, создающую копию таблицы Продавцов с одновременным копированием данных из SAMPLE.SAL. Убедитесь в сходности структур таблиц при помощи команды DESC и идентичности данных в таблице-оригинале и таблице-копии.

CREATE TABLE TEST_SAL
SELECT *
FROM sal;

DESC sal;
DESC test_sal;

SELECT UN.snum, COUNT(UN.snum)
FROM (SELECT *
      FROM sal
      UNION ALL
      SELECT *
      FROM TEST_SAL) UN
GROUP BY UN.snum
HAVING COUNT(*) < 2;

"SELECT *
      FROM sal
      UNION ALL
      SELECT *
      FROM TEST_SAL
ORDER BY snum DESC"


22) Напишите последовательность команд, которая вставляет две новые записи в вашу таблицу Продавцов, выводит таблицу после вставки, удаляет одну запись о новом продавце и вновь выводит таблицу.

START TRANSACTION;

INSERT INTO sal (snum, sname, city, comm) VALUES (1, 'test1', 'testCity', 0.10);

INSERT INTO sal (snum, sname, city, comm) VALUES (2, 'test2', 'testCity', 0.11);

SELECT * FROM sal;

DELETE FROM sal WHERE snum = 2;

SELECT * FROM sal;

COMMIT;


23) Напишите последовательность команд, которая вставляет две строки в вашу таблицу Продавцов, увеличивает в 2 раза комиссионные у всех продавцов и выводит содержимое таблицы после каждого изменения.


START TRANSACTION;

INSERT INTO sal (snum, sname, city, comm) VALUES (1, 'test1', 'testCity', 0.10);

SELECT * FROM sal;

INSERT INTO sal (snum, sname, city, comm) VALUES (2, 'test2', 'testCity', 0.11);

SELECT * FROM sal;

UPDATE sal SET comm = comm * 2;

SELECT * FROM sal;

COMMIT;




